name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: ghcr.io
  #REGISTRY: gcr.io
  REGISTRY: us-docker.pkg.dev
  # github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: nestjs-live-test/gcr.io/nest
  PROJECT_ID: nestjs-live-test
  REGION: us-central1
  SERVICE: 'nest'

jobs:

  ci:
    runs-on: ubuntu-latest
    permissions:
       contents: read
       packages: write
       # This is used to complete the identity challenge
       # with sigstore/fulcio when running outside of PRs.
       id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Install the cosign tool except on PR
       # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          #username: ${{ github.actor }}
          username: _json_key
          #password: ${{ secrets.GITHUB_TOKEN }}
          password: ${{ secrets.GCP_SA_KEY }}

       # Extract metadata (tags, labels) for Docker
       # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: Build testing app
      #   id: build-testing-app
      #   uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      #   with:
      #     context: .
      #     file: ./Dockerfile.prod
      #     target: testing
      #     load: true
      #     push: false
      #     tags: ${{ steps.meta.outputs.tags }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      
      # - name: Up containers
      #   run: docker compose -f docker-compose.prod.yaml up -d
      
      # - name: Waiting environment to be ready
      #   run: wget -qO- https://raw.githubusercontent.com/eficode/wait-for/v2.1.3/wait-for | sh -s -- http://localhost:3000 -- echo success
      
      # - name: Running tests
      #   run: docker-compose -f docker-compose.prod.yaml exec -T app_prod sh -c "NODE_ENV=test npm run test:unit && npm run test:int && npm run test:e2e"
      
      # - name: Build production app and push
      #   id: build-and-push
      #   if: ${{ github.event_name != 'pull_request' }}
      #   uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      #   with:
      #     context: .
      #     file: ./Dockerfile.prod
      #     target: production
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      
      - name: Build production app and push
        id: build-and-push
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ./Dockerfile.prod
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          #tags: us-docker.pkg.dev/nestjs-live-test/gcr.io/nest:main
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
         # This step uses the identity token to provision an ephemeral certificate
         # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  cd:
    needs: ci
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest



    steps:
      #  - name: Checkout repository
      #    uses: actions/checkout@v3

       - name: 'Deploy to Cloud Run'
         uses: 'google-github-actions/deploy-cloudrun@v0'
         with:
          service: ${{ env.SERVICE }}
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          region: ${{ env.REGION }}
          env_vars: MONGO_DSN=${{ secrets.MONGO_DSN }}
        
      #  # Install the cosign tool except on PR
      #  # https://github.com/sigstore/cosign-installer
      #  - name: Install cosign
      #    uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
      #    with:
      #      cosign-release: 'v1.11.0'
      
      #  - name: Setup Docker buildx
      #    uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      
      #  - name: Log into registry ${{ env.REGISTRY }}
      #    uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      #    with:
      #      registry: ${{ env.REGISTRY }}
      #      username: ${{ github.actor }}
      #      password: ${{ secrets.GITHUB_TOKEN }}

      #  # Extract metadata (tags, labels) for Docker
      #  # https://github.com/docker/metadata-action
      #  - name: Extract Docker metadata
      #    id: meta
      #    uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #    with:
      #      images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      #  # Build and push Docker image with Buildx (don't push on PR)
      #  # https://github.com/docker/build-push-action
      #  - name: Build and push Docker image
      #    id: build-and-push
      #    uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      #    with:
      #      context: .
      #      file: ./Dockerfile.prod
      #      push: true
      #      tags: ${{ steps.meta.outputs.tags }}
      #      labels: ${{ steps.meta.outputs.labels }}
      #      cache-from: type=gha
      #      cache-to: type=gha,mode=max
      
      #  # Sign the resulting Docker image digest except on PRs.
      #  # This will only write to the public Rekor transparency log when the Docker
      #  # repository is public to avoid leaking data.  If you would like to publish
      #  # transparency data even for private images, pass --force to cosign below.
      #  # https://github.com/sigstore/cosign
      #  - name: Sign the published Docker image
      #    env:
      #      COSIGN_EXPERIMENTAL: "true"
      #    # This step uses the identity token to provision an ephemeral certificate
      #    # against the sigstore community Fulcio instance.
      #    run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  # build:

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     # This is used to complete the identity challenge
  #     # with sigstore/fulcio when running outside of PRs.
  #     id-token: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # Install the cosign tool except on PR
  #     # https://github.com/sigstore/cosign-installer
  #     - name: Install cosign
  #       if: github.event_name != 'pull_request'
  #       uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
  #       with:
  #         cosign-release: 'v1.11.0'


  #     # Workaround: https://github.com/docker/build-push-action/issues/461
  #     - name: Setup Docker buildx
  #       uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

  #     # Login against a Docker registry except on PR
  #     # https://github.com/docker/login-action
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  #     # Build and push Docker image with Buildx (don't push on PR)
  #     # https://github.com/docker/build-push-action
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max


  #     # Sign the resulting Docker image digest except on PRs.
  #     # This will only write to the public Rekor transparency log when the Docker
  #     # repository is public to avoid leaking data.  If you would like to publish
  #     # transparency data even for private images, pass --force to cosign below.
  #     # https://github.com/sigstore/cosign
  #     - name: Sign the published Docker image
  #       if: ${{ github.event_name != 'pull_request' }}
  #       env:
  #         COSIGN_EXPERIMENTAL: "true"
  #       # This step uses the identity token to provision an ephemeral certificate
  #       # against the sigstore community Fulcio instance.
  #       run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}